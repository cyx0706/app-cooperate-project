# -*- coding: utf-8 -*-
# Generated by Django 1.11.16 on 2019-04-19 20:45
from __future__ import unicode_literals

import app_api.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='FloorComments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='评论内容')),
                ('create_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='发评论时间')),
                ('read_status', models.BooleanField(default=False, verbose_name='评论消息已读状态')),
            ],
            options={
                'verbose_name': '评论',
                'verbose_name_plural': '评论',
                'ordering': ['-create_time'],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=20, verbose_name='帖子标题')),
                ('content', models.TextField(verbose_name='帖子内容')),
                ('create_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='发帖时间')),
                ('display_status', models.BooleanField(default=True, verbose_name='帖子展示状态')),
            ],
            options={
                'verbose_name': '帖子',
                'verbose_name_plural': '帖子',
                'ordering': ['-create_time'],
            },
        ),
        migrations.CreateModel(
            name='PostBars',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(default='no_picture.jpg', upload_to=app_api.models.photo_path, verbose_name='吧图标')),
                ('name', models.CharField(default='', max_length=30, verbose_name='吧名')),
                ('bar_number', models.IntegerField(default=0, verbose_name='帖子数')),
                ('create_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='创吧时间')),
            ],
            options={
                'verbose_name': '吧',
                'verbose_name_plural': '吧',
                'ordering': ['-create_time'],
            },
        ),
        migrations.CreateModel(
            name='PostFloor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='楼层评论内容')),
                ('create_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='发楼层时间')),
                ('unfold_status', models.BooleanField(default=True, verbose_name='楼层展示状态')),
                ('floor_number', models.PositiveIntegerField(verbose_name='楼层数')),
                ('post_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_floor', to='app_api.Post')),
            ],
            options={
                'verbose_name': '楼',
                'verbose_name_plural': '楼',
                'ordering': ['-create_time'],
            },
        ),
        migrations.CreateModel(
            name='PostPhotos',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pic', models.ImageField(upload_to='photo/%Y/%m', verbose_name='帖子图片')),
                ('post_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_photo', to='app_api.Post')),
            ],
            options={
                'verbose_name': '图片',
                'verbose_name_plural': '图片',
            },
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=20, verbose_name='标签')),
            ],
            options={
                'verbose_name': '贴吧类型',
                'verbose_name_plural': '贴吧类型',
            },
        ),
        migrations.CreateModel(
            name='UserAll',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=50, verbose_name='姓名')),
                ('password', models.CharField(max_length=100, verbose_name='密码')),
                ('email', models.EmailField(max_length=30, verbose_name='邮箱')),
                ('avatar', models.ImageField(blank=True, default='avatar_default.jpg', upload_to=app_api.models.avatar_path, verbose_name='头像')),
                ('status', models.BooleanField(default=True, verbose_name='用户状态')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '全部用户',
            },
        ),
        migrations.CreateModel(
            name='UserDetailMsg',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('birthday', models.DateField(blank=True, verbose_name='生日')),
                ('gender', models.CharField(blank=True, choices=[(0, '男'), (1, '女'), (2, '保密')], max_length=10, verbose_name='性别')),
                ('description', models.TextField(blank=True, verbose_name='个人简介')),
                ('background_pic', models.ImageField(blank=True, upload_to=app_api.models.photo_path)),
                ('collections', models.ManyToManyField(to='app_api.Post', verbose_name='收藏的帖子')),
            ],
        ),
        migrations.CreateModel(
            name='UserFollow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mutual_following', models.BooleanField(default=False, verbose_name='互相关注状态')),
                ('read_status', models.BooleanField(default=False, verbose_name='消息已读状态')),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_api.UserAll')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_api.UserDetailMsg')),
            ],
        ),
        migrations.CreateModel(
            name='UserWatching',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_status', models.BooleanField(default=False, verbose_name='消息已读状态')),
                ('bar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_api.PostBars')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_api.UserDetailMsg')),
            ],
        ),
        migrations.AddField(
            model_name='userdetailmsg',
            name='follow',
            field=models.ManyToManyField(through='app_api.UserFollow', to='app_api.UserAll', verbose_name='关注'),
        ),
        migrations.AddField(
            model_name='userdetailmsg',
            name='interest',
            field=models.ManyToManyField(to='app_api.Tags', verbose_name='兴趣'),
        ),
        migrations.AddField(
            model_name='userdetailmsg',
            name='user_msg',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_msg', to='app_api.UserAll', verbose_name='用户id'),
        ),
        migrations.AddField(
            model_name='userdetailmsg',
            name='watching',
            field=models.ManyToManyField(through='app_api.UserWatching', to='app_api.PostBars', verbose_name='关注的吧'),
        ),
        migrations.AlterIndexTogether(
            name='userall',
            index_together=set([('username', 'password', 'email')]),
        ),
        migrations.AddField(
            model_name='postfloor',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='floor_writer', to='app_api.UserAll'),
        ),
        migrations.AddField(
            model_name='postbars',
            name='feature',
            field=models.ManyToManyField(to='app_api.Tags'),
        ),
        migrations.AddField(
            model_name='postbars',
            name='master',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bar_owner', to='app_api.UserAll'),
        ),
        migrations.AddField(
            model_name='post',
            name='bar_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_bar', to='app_api.PostBars'),
        ),
        migrations.AddField(
            model_name='post',
            name='writer_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_writer', to='app_api.UserAll'),
        ),
        migrations.AddField(
            model_name='floorcomments',
            name='reply_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='floor_comment', to='app_api.PostFloor'),
        ),
        migrations.AddField(
            model_name='floorcomments',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_user', to='app_api.UserAll'),
        ),
        migrations.AlterIndexTogether(
            name='postfloor',
            index_together=set([('create_time',)]),
        ),
        migrations.AlterIndexTogether(
            name='postbars',
            index_together=set([('name', 'master', 'create_time')]),
        ),
        migrations.AlterIndexTogether(
            name='post',
            index_together=set([('create_time',)]),
        ),
        migrations.AlterIndexTogether(
            name='floorcomments',
            index_together=set([('create_time',)]),
        ),
    ]
